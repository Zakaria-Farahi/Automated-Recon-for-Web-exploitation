#!/bin/bash

# Author: Zakaria Farahi & Saad lili & Sohaib
# Created: 7 May 2024
# Last Modified: 10 May 2024

# Description:
# Check if the Tools will be used is already installed if not try to install it

# Usage:
# sudo ./checking -y

helping() {
	echo "Usage: $0 [options]"
	echo "Options:"
	echo "  -h, --help     Display this help message"
	echo "  -i, --install  Allow Program to install missing tools"
}

install=0
# Create projet dirs
mkdir -p Domain_Info Screenshots lastPart/backurl/gau lastPart/backurl/wayback lastPart/contentDir/DirSearch lastPart/contentDir/fuzz lastPart/Github/Githound lastPart/JsFiles lastPart/subSub/AltDNS liveSubDom/httpx port_Scan/masscan port_Scan/nmap Subdomain/Amass Subdomain/Sublist3r logs wordlists
touch Domain_Info/DNS_Rec.txt Domain_Info/whois.txt lastPart/backurl/gau/res_gau.txt lastPart/backurl/res_final.txt lastPart/backurl/res_way.txt lastPart/contentDir/DirSearch/res_Dir.txt lastPart/contentDir/fuzz/res_f.txt lastPart/contentDir/res_final.txt lastPart/Github/Githound/res_hound.txt lastPart/subSub/AltDNS/res.txt liveSubDom/httpx/live.txt port_Scan/masscan/res_mass.txt Subdomain/Amass/res_amass.txt Subdomain/ip_add.txt Subdomain/subdomains_filterd.txt

# Options
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
	helping
	exit 0
elif [[ "$1" == "-i" || "$1" == "--install" ]]; then
	install=1
fi

# Check if user is Root
if [ "$EUID" -ne 0 ]; then
	echo "This script must be run with sudo."
	exit 1
fi

# Testing and installing
# whois
if ! command -v whois &>/dev/null; then
	echo "whois is not installed."
	if [[ "$install" == 0 ]]; then
		read -p "Do you want to install it? (y / n) : " accepted
	fi
	if [[ "$accepted" == "y" || "$install" == 1 ]]; then
		sudo apt install -y whois >/dev/null
	else
		echo "Installation cancelled."
	fi
else
	echo "whois is already installed"
fi

# nslookup
if ! command -v nslookup &>/dev/null; then
	echo "nslookup is not installed."
	if [[ "$install" == 0 ]]; then
		read -p "Do you want to install it? (y / n) : " accepted
	fi
	if [[ "$accepted" == "y" || "$install" == 1 ]]; then
		sudo apt install -y dnsutils >/dev/null
	else
		echo "Installation cancelled."
	fi
else
	echo "nslookup is already installed"
fi

# amass
if ! command -v amass &>/dev/null; then
	echo "amass is not installed."
	if [[ "$install" == 0 ]]; then
		read -p "Do you want to install it? (y / n) : " accepted
	fi
	if [[ "$accepted" == "y" || "$install" == 1 ]]; then
		# check for golang dont try to install it
		if ! command -v go &>/dev/null; then
			echo "golang is not installed."
			echo "Please install golang first."
			exit 1
		fi
		# install amass
		go install -v github.com/owasp-amass/amass/v4/...@master >/dev/null
		cd $HOME/go/bin
		sudo cp amass /usr/bin
	else
		echo "Installation cancelled."
	fi
else
	echo "amass is already installed"
fi

# subfinder
if ! command -v subfinder &>/dev/null; then
	echo "subfinder is not installed."
	if [[ "$install" == 0 ]]; then
		read -p "Do you want to install it? (y / n) : " accepted
	fi
	if [[ "$accepted" == "y" || "$install" == 1 ]]; then
		# check for golang dont try to install it
		if ! command -v go &>/dev/null; then
			echo "golang is not installed."
			echo "Please install golang first."
			exit 1
		fi
		# install subfinder
		go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest >/dev/null
		cd $HOME/go/bin
		sudo cp subfinder /usr/bin
	else
		echo "Installation cancelled."
	fi
else
	echo "subfinder is already installed"
fi

# sublist3r
if ! command -v sublist3r &>/dev/null; then
	echo "sublist3r is not installed."
	if [[ "$install" == 0 ]]; then
		read -p "Do you want to install it? (y / n) : " accepted
	fi
	if [[ "$accepted" == "y" || "$install" == 1 ]]; then
		# check for python3 dont try to install it
		if ! command -v python3 &>/dev/null; then
			echo "python3 is not installed."
			echo "Please install python3 first."
			exit
		fi
		# install sublist3r
		git clone https://github.com/aboul3la/Sublist3r.git >/dev/null
		sudo mv Sublist3r/ /opt/
		cd /opt/Sublist3r/
		# Create a virtual environment
		sudo apt update
		apt install python3.10-venv
		python3 -m venv venv
		source venv/bin/activate
		# Install the requirements
		# Check if pip is installed ?
		if command -v pip >/dev/null 2>&1; then
			echo "pip is installed, proceeding with installation of requirements"
			pip install -r requirements.txt
		else
			echo "pip is not installed, we will install it now"
			# Install pip
			sudo apt update
			sudo apt install -y python3-pip
			# Check if pip installation was successful
			if [ $? -eq 0 ]; then
				echo "pip installation successful, proceeding with installation of requirements"
				pip install -r requirements.txt
			else
				echo "pip installation failed, please install pip manually and then run 'pip install -r requirements.txt'"
				exit 1
			fi
		fi
		touch sublist3r
		echo "#!/bin/bash" >>sublist3r
		echo "python3 /opt/Sublist3r/sublist3r.py \"\$*\"" >>sublist3r
		chmod +x sublist3r
		sudo mv sublist3r /usr/bin/
	else
		echo "Installation cancelled."
	fi
else
	echo "sublist3r is already installed"
fi
# Define the project and spider names
PROJECT_NAME="urls_js_extractor"
PROJECT_PATH="./lastPart/$PROJECT_NAME"
SPIDERS_DIR="$PROJECT_PATH/$PROJECT_NAME/spiders"
URLS_EXTRACTOR_FILE="urls_extractor.py"
JS_EXTRACTOR_FILE="js_extractor.py"

# Function to set up Scrapy project and spiders
setup_scrapy_project() {
	# Check if the directory exists
	if [ -d "$PROJECT_PATH" ]; then
		echo "The directory $PROJECT_PATH already exists."
	else
		# Create Scrapy project
		scrapy startproject $PROJECT_NAME
		mkdir "$PROJECT_NAME/urls_endpoints"
		mv $PROJECT_NAME ./lastPart
		# Check if the project directory exists and move it if it does
		if [ -d "./lastPart/$PROJECT_NAME" ]; then
			# Create the spider files and write the spider code to them
			touch $SPIDERS_DIR/$URLS_EXTRACTOR_FILE
			cat <<EOF >$SPIDERS_DIR/$URLS_EXTRACTOR_FILE
import scrapy
class DomainSpider(scrapy.Spider):
    name = 'urls_extractor'
    def start_requests(self):
        url = getattr(self, 'domain', None)
        if url:
            url = 'http://' + url if not url.startswith('http') else url
            yield scrapy.Request(url, self.parse)
        else:
            self.logger.error("Domain not provided. Use the -a option to specify the domain.")
            raise scrapy.exceptions.CloseSpider(reason="Domain not provided")
    def parse(self, response):
        for href in response.css('a::attr(href)'):
            full_url = response.urljoin(href.extract())
            yield {'URL': full_url}
        if 'api' in response.url:
            yield {'API Endpoint': response.url}
EOF
			touch $SPIDERS_DIR/$JS_EXTRACTOR_FILE
			cat <<EOF >$SPIDERS_DIR/$JS_EXTRACTOR_FILE
import scrapy
import json
class JsExtractorSpider(scrapy.Spider):
    name = 'js_extractor'
    def __init__(self, url_file=None, *args, **kwargs):
        super(JsExtractorSpider, self).__init__(*args, **kwargs)
        if url_file:
            with open(url_file, 'r') as file:
                data = json.load(file)
                self.start_urls = [item['URL'] for item in data]
    def parse(self, response):
        js_links = response.css('script::attr(src)').getall()
        for js in js_links:
            if js:
                full_js_url = response.urljoin(js)
                yield {'URL': full_js_url}
EOF
		else
			echo "Failed to create project"
			exit 1
		fi
	fi
}

# Check if Scrapy is installed
if ! scrapy --version >/dev/null 2>&1; then
	echo "Scrapy is not installed."
	read -p "Do you want to install it? (y / n) : " accepted
	if [[ "$accepted" == "y" ]]; then
		pip install scrapy >/dev/null
		echo "Scrapy has been installed."
		setup_scrapy_project
	else
		echo "Installation cancelled."
		exit 1
	fi
else
	echo "Scrapy is already installed."
	setup_scrapy_project
fi

# nmap
if ! command -v nmap &>/dev/null; then
	echo "nmap is not installed."
	if [[ "$install" == 0 ]]; then
		read -p "Do you want to install it? (y / n) : " accepted
	fi
	if [[ "$accepted" == "y" || "$install" == 1 ]]; then
		sudo apt install -y nmap >/dev/null
	else
		echo "Installation cancelled."
	fi
else
	echo "nmap is already installed"
fi

# masscan
if ! command -v masscan &>/dev/null; then
	echo "masscan is not installed."
	if [[ "$install" == 0 ]]; then
		read -p "Do you want to install it? (y / n) : " accepted
	fi
	if [[ "$accepted" == "y" || "$install" == 1 ]]; then
		sudo apt install -y masscan >/dev/null
	else
		echo "Installation cancelled."
	fi
else
	echo "masscan is already installed"
fi

# httpx
if ! command -v httpx &>/dev/null; then
	echo "httpx is not installed."
	if [[ "$install" == 0 ]]; then
		read -p "Do you want to install it? (y / n) : " accepted
	fi
	if [[ "$accepted" == "y" || "$install" == 1 ]]; then
		# check for golang dont try to install it
		if ! command -v go &>/dev/null; then
			echo "golang is not installed."
			echo "Please install golang first."
			exit 1
		fi
		# install httpx
		go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest >/dev/null
		cd $HOME/go/bin
		sudo cp httpx /usr/bin
	else
		echo "Installation cancelled."
	fi
else
	echo "httpx is already installed"
fi

# ffuf
if ! command -v ffuf &>/dev/null; then
	echo "ffuf is not installed."
	if [[ "$install" == 0 ]]; then
		read -p "Do you want to install it? (y / n) : " accepted
	fi
	if [[ "$accepted" == "y" || "$install" == 1 ]]; then
		# check for golang dont try to install it
		if ! command -v go &>/dev/null; then
			echo "golang is not installed."
			echo "Please install golang first."
			exit 1
		fi
		# install ffuf
		go install -v github.com/ffuf/ffuf@latest >/dev/null
		cd $HOME/go/bin
		sudo cp ffuf /usr/bin
	else
		echo "Installation cancelled."
	fi
else
	echo "ffuf is already installed"
fi

# dirsearch

if ! command -v dirsearch &>/dev/null; then
	echo "dirsearch is not installed."
	if [[ "$install" == 0 ]]; then
		read -p "Do you want to install it? (y / n) : " accepted
	fi
	if [[ "$accepted" == "y" || "$install" == 1 ]]; then
		# check for python3 dont try to install it
		if ! command -v python3 &>/dev/null; then
			echo "python3 is not installed."
			echo "Please install python3 first."
			exit
		fi
		# install dirsearch
		git clone https://github.com/maurosoria/dirsearch.git
		sudo mv dirsearch/ /opt/
		cd /opt/dirsearch/
		# Create a virtual environment
		sudo apt update
		apt install python3.10-venv
		python3 -m venv venv
		source venv/bin/activate
		# Install the requirements
		# Check if pip is installed ?
		if command -v pip3 >/dev/null 2>&1; then
			echo "pip is installed, proceeding with installation of requirements"
			pip3 install -r requirements.txt
		else
			echo "pip is not installed, we will install it now"
			# Install pip
			sudo apt update
			sudo apt install -y python3-pip
			# Check if pip installation was successful
			if [ $? -eq 0 ]; then
				echo "pip installation successful, proceeding with installation of requirements"
				pip install -r requirements.txt
			else
				echo "pip installation failed, please install pip manually and then run 'pip3 install -r requirements.txt'"
				exit 1
			fi
		fi
		touch dirsearch
		echo "#!/bin/bash" >>dirsearch
		echo "python3 /opt/dirsearch/dirsearch.py \"\$*\"" >>dirsearch
		chmod +x dirsearch
		sudo mv dirsearch /usr/bin/
	else
		echo "Installation cancelled."
	fi
else
	echo "dirsearch is already installed"
fi

# AltDNS

if ! command -v altdns &>/dev/null; then
	echo "altdns is not installed."
	if [[ "$install" == 0 ]]; then
		read -p "Do you want to install it? (y / n) : " accepted
	fi
	if [[ "$accepted" == "y" || "$install" == 1 ]]; then
		# check for python3 dont try to install it
		if ! command -v python3 &>/dev/null; then
			echo "python3 is not installed."
			echo "Please install python3 first."
			exit
		fi
		# install dirsearch
		git clone https://github.com/infosec-au/altdns
		sudo mv altdns/ /opt/
		cd /opt/altdns/
		# Create a virtual environment
		sudo apt update
		sudo apt install python3-venv
		python3 -m venv venv
		source venv/bin/activate
		# Install the requirements
		# Check if pip is installed ?
		if command -v pip3 >/dev/null 2>&1; then
			echo "pip is installed, proceeding with installation of requirements"
			pip3 install -r requirements.txt
		else
			echo "pip is not installed, we will install it now"
			# Install pip
			sudo apt update
			sudo apt install -y python3-pip
			# Check if pip installation was successful
			if [ $? -eq 0 ]; then
				echo "pip installation successful, proceeding with installation of requirements"
				pip install -r requirements.txt
			else
				echo "pip installation failed, please install pip manually and then run 'pip3 install -r requirements.txt'"
				exit 1
			fi
		fi
		ls -l
		pwd
		sudo touch altDns
		ls -l
		echo "#!/bin/bash" >>altDns
		echo "python3 /opt/altdns/setup.py \"\$*\"" >>altDns
		chmod +x altDns
		sudo mv altDns /usr/bin/
	else
		echo "Installation cancelled."
	fi
else
	echo "altdns is already installed"
fi

# waybackurls using go

if ! command -v waybackurls &>/dev/null; then
	echo "waybackurls is not installed."
	if [[ "$install" == 0 ]]; then
		read -p "Do you want to install it? (y / n) : " accepted
	fi
	if [[ "$accepted" == "y" || "$install" == 1 ]]; then
		# check for golang dont try to install it
		if ! command -v go &>/dev/null; then
			echo "golang is not installed."
			echo "Please install golang first."
			exit 1
		fi
		# install waybackurls
		go install github.com/tomnomnom/waybackurls@latest
		cd $HOME/go/bin
		sudo cp waybackurls /usr/bin
	else
		echo "Installation cancelled."
	fi
else
	echo "waybackurls is already installed"
fi

# getallurls (gau) using go

if ! command -v gau &>/dev/null; then
	echo "gau is not installed."
	if [[ "$install" == 0 ]]; then
		read -p "Do you want to install it? (y / n) : " accepted
	fi
	if [[ "$accepted" == "y" || "$install" == 1 ]]; then
		# check for golang dont try to install it
		if ! command -v go &>/dev/null; then
			echo "golang is not installed."
			echo "Please install golang first."
			exit 1
		fi
		# install gau
		go install github.com/lc/gau/v2/cmd/gau@latest
		cd $HOME/go/bin
		sudo cp gau /usr/bin
	else
		echo "Installation cancelled."
	fi
else
	echo "gau is already installed"
fi

# gf

if ! command -v gf &>/dev/null; then
	echo "gf is not installed."
	if [[ "$install" == 0 ]]; then
		read -p "Do you want to install it? (y / n) : " accepted
	fi
	if [[ "$accepted" == "y" || "$install" == 1 ]]; then
		# check for golang dont try to install it
		if ! command -v go &>/dev/null; then
			echo "golang is not installed."
			echo "Please install golang first."
			exit 1
		fi
		# install gf
		go install github.com/tomnomnom/gf@latest
		cd $HOME/go/bin
		sudo cp gf /usr/bin
	else
		echo "Installation cancelled."
	fi
else
	echo "gf is already installed"
fi
