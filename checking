#!/bin/bash

# Author: Zakaria Farahi & Saad lili & Sohaib
# Created: 7 May 2024
# Last Modified: 7 May 2024

# Description:
# Check if the Tools will be used is already installed if not try to install it

# Usage:
# sudo ./checking -y

helping() {
	echo "Usage: $0 [options]"
	echo "Options:"
	echo "  -h, --help     Display this help message"
	echo "  -i, --install  Allow Program to install missing tools"
}

install=0

# Options
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
	helping
	exit 0
elif [[ "$1" == "-i" || "$1" == "--install" ]]; then
	install=1
fi

# Check if user is Root
if [ "$EUID" -ne 0 ]; then
	echo "This script must be run with sudo."
	exit 1
fi

# Testing and installing
# whois
if ! command -v whois &>/dev/null; then
	echo "whois is not installed."
	if [[ "$install" == 0 ]]; then
		read -p "Do you want to install it? (y / n) : " accepted
	fi
	if [[ "$accepted" == "y" || "$install" == 1 ]]; then
		sudo apt install -y whois >/dev/null
	else
		echo "Installation cancelled."
	fi
else
	echo "whois is already installed"
fi

# nslookup
if ! command -v nslookup &>/dev/null; then
	echo "nslookup is not installed."
	if [[ "$install" == 0 ]]; then
		read -p "Do you want to install it? (y / n) : " accepted
	fi
	if [[ "$accepted" == "y" || "$install" == 1 ]]; then
		sudo apt install -y dnsutils >/dev/null
	else
		echo "Installation cancelled."
	fi
else
	echo "nslookup is already installed"
fi

# amass
if ! command -v amass &>/dev/null; then
	echo "amass is not installed."
	if [[ "$install" == 0 ]]; then
		read -p "Do you want to install it? (y / n) : " accepted
	fi
	if [[ "$accepted" == "y" || "$install" == 1 ]]; then
		# check for golang dont try to install it
		if ! command -v go &>/dev/null; then
			echo "golang is not installed."
			echo "Please install golang first."
			exit 1
		fi
		# install amass
		go install -v github.com/owasp-amass/amass/v4/...@master >/dev/null
		cd $HOME/go/bin
		sudo cp amass /usr/bin
	else
		echo "Installation cancelled."
	fi
else
	echo "amass is already installed"
fi

# subfinder
if ! command -v subfinder &>/dev/null; then
	echo "subfinder is not installed."
	if [[ "$install" == 0 ]]; then
		read -p "Do you want to install it? (y / n) : " accepted
	fi
	if [[ "$accepted" == "y" || "$install" == 1 ]]; then
		# check for golang dont try to install it
		if ! command -v go &>/dev/null; then
			echo "golang is not installed."
			echo "Please install golang first."
			exit 1
		fi
		# install subfinder
		go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest >/dev/null
		cd $HOME/go/bin
		sudo cp subfinder /usr/bin
	else
		echo "Installation cancelled."
	fi
else
	echo "subfinder is already installed"
fi

# sublits3r
bash ./install_sublist3r.sh

# scrapy
bash ./install_scrapy.sh

# nmap
if ! command -v nmap &>/dev/null; then
	echo "nmap is not installed."
	if [[ "$install" == 0 ]]; then
		read -p "Do you want to install it? (y / n) : " accepted
	fi
	if [[ "$accepted" == "y" || "$install" == 1 ]]; then
		sudo apt install -y nmap >/dev/null
	else
		echo "Installation cancelled."
	fi
else
	echo "nmap is already installed"
fi

# masscan
if ! command -v masscan &>/dev/null; then
	echo "masscan is not installed."
	if [[ "$install" == 0 ]]; then
		read -p "Do you want to install it? (y / n) : " accepted
	fi
	if [[ "$accepted" == "y" || "$install" == 1 ]]; then
		sudo apt install -y masscan >/dev/null
	else
		echo "Installation cancelled."
	fi
else
	echo "masscan is already installed"
fi

# httpx
if ! command -v httpx &>/dev/null; then
	echo "httpx is not installed."
	if [[ "$install" == 0 ]]; then
		read -p "Do you want to install it? (y / n) : " accepted
	fi
	if [[ "$accepted" == "y" || "$install" == 1 ]]; then
		# check for golang dont try to install it
		if ! command -v go &>/dev/null; then
			echo "golang is not installed."
			echo "Please install golang first."
			exit 1
		fi
		# install httpx
		go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest >/dev/null
		cd $HOME/go/bin
		sudo cp httpx /usr/bin
	else
		echo "Installation cancelled."
	fi
else
	echo "httpx is already installed"
fi

# ffuf
if ! command -v ffuf &>/dev/null; then
	echo "ffuf is not installed."
	if [[ "$install" == 0 ]]; then
		read -p "Do you want to install it? (y / n) : " accepted
	fi
	if [[ "$accepted" == "y" || "$install" == 1 ]]; then
		# check for golang dont try to install it
		if ! command -v go &>/dev/null; then
			echo "golang is not installed."
			echo "Please install golang first."
			exit 1
		fi
		# install ffuf
		go install -v github.com/ffuf/ffuf@latest >/dev/null
		cd $HOME/go/bin
		sudo cp ffuf /usr/bin
	else
		echo "Installation cancelled."
	fi
else
	echo "ffuf is already installed"
fi
